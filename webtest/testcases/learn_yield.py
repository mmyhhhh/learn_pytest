"""
可迭代和迭代器的区别：

可迭代 (iterable)：如果一个对象具备有__iter__() 或者 __getitem__()其中任何一个魔术方法的话，这个对象就可以称为是可迭代的。其中，__iter__()的作用是可以让for循环遍历，
而__getitem__()方法可以让实例对象通过[index]索引的方式去访问实例中的元素。所以，列表List、元组Tuple、字典Dictionary、字符串String等数据类型都是可迭代的。

迭代器 (iterator): 如果一个对象同时有__iter__()和__next__()魔术方法的话，这个对象就可以称为是迭代器。__iter__()的作用前面我们也提到过，是可以让for循环遍历。而__next__()方法是让对象可以通过 **next(实例对象) **的方式访问下一个元素。
列表List、元组Tuple、字典Dictionary、字符串String等数据类型虽然是可迭代的，但都不是迭代器，因为他们都没有next( )方法。

"""



def foo():
    print("starting...")
    while True:
        res = yield 4
        print("res:", res)


g = foo()
# 程序遇到yield关键字，然后把yield想想成return,return了一个4之后，程序停止，并没有执行赋值给res操作，此时next(g)语句执行完成，
# 所以输出的前两行（第一个是while上面的print的结果,第二个是return出的结果）是执行print(next(g))的结果
print(next(g))

print("*" * 20)
# 又开始执行下面的print(next(g)),这个时候和上面那个差不多，不过不同的是，这个时候是从刚才那个next程序停止的地方开始执行的，也就是要执行res的赋值操作，这时候要注意，这个时候赋值操作的右边是没有值的
# （因为刚才那个是return出去了，并没有给赋值操作的左边传参数），所以这个时候res赋值是None,所以接着下面的输出就是res:None
print(next(g))
print("*" * 20)
print(next(g))



"""
所有以“__”双下划线包起来的方法，都统称为“Magic Method”，中文称『魔术方法』
python中常用的魔术方法：
    1.__del__方法：销毁魔术方法
    2.__call__方法：可以让类的实例具有类似于函数的行为，使用__call__方法实现斐波那契数列
    3.__repr__方法：改变对象的字符串显示
    4.__new__方法：实例化魔术方法
    5.__str__方法：print（对象时）进行操作，得到字符串，通常用于快捷操作
    6.Python中的比较is和==：is 比较两个对象的 id 值是否相等，是否指向同一个内存地址；== 比较的是两个对象的内容是否相等，即内存地址可以不一样，内容一样就可以了。
    7.__hash__方法：希（hash）也翻译作散列。Hash算法，是将一个不定长的输入，通过哈希函数变换成一个定长的输出，即哈希值。
"""